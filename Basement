import lxml
import re
import numpy as np
import pandas as pd
import sqlite3

from bs4 import BeautifulSoup
from requests import get

url1 = "https://www.imdb.com/search/title?count=100&title_type=feature,tv_series&ref_=nv_wl_img_2"

conn = sqlite3.connect('IMDataBase.sqlite')
cur = conn.cursor()

cur.execute('''
DROP TABLE IF EXISTS films''')

cur.execute('''
CREATE TABLE films(id INTEGER, movieTitle TEXT, movieDate TEXT, movieRunTime INTEGER, movieGenre TEXT,
 movieRating FLOAT, movieScore FLOAT, movieDescription TEXT, movieDirector TEXT, movieStars TEXT,
  movieVotes TEXT, movieGross TEXT)''')

class IMDB(object):
	"""docstring for IMDB"""
	def __init__(self, url):
		super(IMDB, self).__init__()
		page = get(url)

		self.soup = BeautifulSoup(page.content, 'lxml')

	def articleTitle(self):
		return self.soup.find("h1", class_="header").text.replace("\n","")

	def bodyContent(self):
		content = self.soup.find(id="main")
		return content.find_all("div", class_="lister-item mode-advanced")

	def movieData(self):
		movieFrame = self.bodyContent()
		movieTitle = []
		movieDate = []
		movieRunTime = []
		movieGenre = []
		movieRating = []
		movieScore = []
		movieDescription = []
		movieDirector = []
		movieStars = []
		movieVotes = []
		movieGross = []

		for movie in movieFrame:
			movieFirstLine = movie.find("h3", class_="lister-item-header")
			movieTitle.append(movieFirstLine.find("a").text)
			movieDate.append(re.sub(r"[()]","", movieFirstLine.find_all("span")[-1].text))
			
			try:
				movieRunTime.append(movie.find("span", class_="runtime").text[:-4])
			except:
				movieRunTime.append(np.nan)

			movieGenre.append(movie.find("span", class_="genre").text.rstrip().replace("\n","").split(","))
			try:
				movieRating.append(movie.find("strong").text)
			except:
				movieRating.append(np.nan)
			try:
				movieScore.append(movie.find("span", class_="metascore").text.rstrip())
			except:
				movieScore.append(np.nan)

			movieDescription.append(movie.find_all("p", class_="text-muted")[-1].text.lstrip())
			movieCast = movie.find("p", class_="")

			try:
				casts = movieCast.text.replace("\n","").split('|')
				casts = [x.strip() for x in casts]
				casts = [casts[i].replace(j, "") for i,j in enumerate(["Director:", "Stars:"])]
				movieDirector.append(casts[0])
				movieStars.append([x.strip() for x in casts[1].split(",")])

			except:
				casts = movieCast.text.replace("\n","").strip()
				movieDirector.append(np.nan)
				movieStars.append([x.strip() for x in casts.split(",")])

			movieNumbers = movie.find_all("span", attrs={"name": "nv"})

			if len(movieNumbers) == 2:
				movieVotes.append(movieNumbers[0].text)
				movieGross.append(movieNumbers[1].text)
			elif len(movieNumbers) == 1:
				movieVotes.append(movieNumbers[0].text)
				movieGross.append(np.nan)
			else:
				movieVotes.append(np.nan)
				movieGross.append(np.nan)

		movieData = [movieTitle, movieDate, movieRunTime, movieGenre, movieRating, movieScore, movieDescription,
							movieDirector, movieStars, movieVotes, movieGross]
		return movieData

x=IMDB.movieData(IMDB(url1))
with open("base.txt", "w") as f:
	f.write(str(x[6]))

f0=x[0]
f1=x[1]
f2=x[2]
f3=x[3]
f4=x[4]
f5=x[5]
f6=x[6]
f7=x[7]
f8=x[8]
f9=x[9]
f10=x[10]

for i in range(100):
	cur.execute('INSERT INTO films (id, movieTitle, movieDate, movieRunTime, movieGenre, movieRating, movieScore, movieDescription, movieDirector, movieStars, movieVotes, movieGross) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',((i, f0[i], f1[i], f2[i], str(f3[i]), f4[i], f5[i], f6[i], f7[i], str(f8[i]), f9[i], f10[i])))
	cur.execute(''' UPDATE films
					SET movieGenre = REPLACE(REPLACE(REPLACE(movieGenre,"[", " "),"'"," "),"]","")''',)
cur.fetchone()
conn.commit()

"""
modelo de impress√£o lista dentro de lista
for i in range(100):
	with open('base.txt', 'a') as f:
		f.write(str(d[i]))
		f.write('\n')

modelo de loop
for r in movieData:
	print(r)
"""

