import lxml
import re
import numpy as np
import pandas as pd
import sqlite3

from bs4 import BeautifulSoup
from requests import get

url1 = "https://www.imdb.com/search/title?count=100&title_type=feature,tv_series&ref_=nv_wl_img_2"
# https://www.metacritic.com/movie/morbius/trailers/14703347 for metascore


conn = sqlite3.connect('IMDataBase.sqlite')
cur = conn.cursor()

cur.execute('''
DROP TABLE IF EXISTS films''')

cur.execute('''
CREATE TABLE films(id INTEGER, tv TEXT, movieTitle TEXT, movieDate TEXT, movieRunTime INTEGER, movieGenre TEXT,
 movieRating FLOAT, movieScore FLOAT, movieDescription TEXT, movieDirector TEXT, serieDirector TEXT, movieStars TEXT,
  movieVotes TEXT, movieGross TEXT)''')

movie = MovieIMDB(URL)
movie.title
class MovieIMDB:
    def __init__(self, url):
        page = get(url)
        soup = BeautifulSoup(page.content, 'lxml')
        sel.title = soup.

    def articleTitle(self):
        return self.soup.find("h1", class_="header").text.replace("\n","")

    def bodyContent(self):
        content = self.soup.find(id="main")
        return content.find_all("div", class_="lister-item mode-advanced")

    def movieData(self):
        movieFrame = self.bodyContent()
        movieTitle = []
        movieDate = []
        moviesRunTime = []
        movieGenre = []
        movieRating = []
        movieScore = []
        movieDescription = []
        movieDirector = []
        movieStars = []
        movieVotes = []
        movieGross = []

        for movie in movieFrame:
            movieFirstLine = movie.find("h3", class_="lister-item-header")
            movieTitle.append(movieFirstLine.find("a").text)
            movieDate.append(re.sub(r"[()]","", movieFirstLine.find_all("span")[-1].text))
            
            try:
                movieRunTime.append(movie.find("span", class_="runtime").text[:-4])
            except:
                movieRunTime.append(np.nan)

            movieGenre.append(movie.find("span", class_="genre").text.rstrip().replace("\n","").split(","))
            try:
                movieRating.append(movie.find("strong").text)
            except:
                movieRating.append("not released")
            try:
                movieScore.append(movie.find("span", class_="metascore").text.rstrip())
            except:
                movieScore.append(np.nan)

            movieDescription.append(movie.find_all("p", class_="text-muted")[-1].text.lstrip())
            movieCast = movie.find("p", class_="")

            try:
                casts = movieCast.text.replace("\n","").split('|')
                casts = [x.strip() for x in casts]
                casts = [casts[i].replace(j, "") for i,j in enumerate(["Director:", "Stars:"])]
                movieDirector.append(casts[0])
                movieStars.append([x.strip() for x in casts[1].split(",")])

            except:
                casts = movieCast.text.replace("\n","").strip()
                movieDirector.append(np.nan)
                movieStars.append([x.strip() for x in casts.split(",")])

            movieNumbers = movie.find_all("span", attrs={"name": "nv"})

            if len(movieNumbers) == 2:
                movieVotes.append(movieNumbers[0].text)
                movieGross.append(movieNumbers[1].text)
            elif len(movieNumbers) == 1:
                movieVotes.append(movieNumbers[0].text)
                movieGross.append("not officially disclosed")
            else:
                movieVotes.append("not released")
                movieGross.append("not released")

        movieData = [movieTitle, movieDate, movieRunTime, movieGenre, movieRating, movieScore, movieDescription,
                            movieDirector, movieStars, movieVotes, movieGross]
        return movieData

movieIMDb=IMDB.movieData(IMDB(url1))

f0=x[0]
f1=x[1]
f2=x[2]
f3=x[3]
f4=x[4]
f5=x[5]
f6=x[6]
f7=x[7]
f8=x[8]
f9=x[9]
f10=x[10]

for i in range(100):
    cur.execute('INSERT INTO films (id, movieTitle, movieDate, movieRunTime, movieGenre, movieRating, movieScore, movieDescription, movieDirector, movieStars, movieVotes, movieGross) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',((i, f0[i], f1[i], f2[i], str(f3[i]), f4[i], f5[i], f6[i], f7[i], str(f8[i]), f9[i], f10[i])))
    cur.execute(''' UPDATE films    
        SET movieGenre = REPLACE(REPLACE(REPLACE(movieGenre,"[", " "),"'"," "),"]","")''',)
    cur.execute(''' UPDATE films
        SET tv = 'TV Serie' WHERE movieDate LIKE '%–%' ''',)
    cur.execute(''' UPDATE films
        SET tv = 'TV Film' WHERE movieDirector IS NOT NULL ''',)
    cur.execute(''' UPDATE films 
        SET movieStars = REPLACE(REPLACE(REPLACE(REPLACE(movieStars,"[", " "),"'"," "),"]",""),"Stars:","")''',)
    cur.execute(''' UPDATE films
        SET movieDate = REPLACE (movieDate, "I", "release forecast for")''',)
    cur.execute(''' UPDATE films
        SET movieDate = REPLACE (movieDate, "release forecast forrelease forecast for", "release forecast for")''',)
    cur.execute(''' UPDATE films
        SET movieDate = REPLACE (movieDate, "– ", " At the moment")''',)
    cur.execute(''' UPDATE films
        SET movieDate = "not released yet" WHERE movieDate like''  ''',)

cur.fetchone()
conn.commit()